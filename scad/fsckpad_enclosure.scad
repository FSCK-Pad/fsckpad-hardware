$pp1_colour = "grey";           // Override any global defaults here if required, see NopSCADlib/global_defs.scad.
include <NopSCADlib/lib.scad>   // Includes all the vitamins and utilities in NopSCADlib but not the printed parts.
include <fsckpad_board.scad> //Include the autogenerated board for design purposes


module shape(){
    union(){
        polygon(BOARD_POLY);
        translate([-WIDTH,0,0]) mirror([1,0,0]) polygon(BOARD_POLY);
    }
}

module trigger(thick=9.5, hinge_thick=2){
    translate([ -10, -4.5, 0 ]) rotate([ ]) difference() {
        minkowski(){
            difference(){ 
                union(){
                    translate([0,0,-(thick-6)/2]) linear_extrude(thick - 6, convexity=20) polygon([
                        [0, 0],
                        [20, 0],
                        [20,-20],
                        [5, -15]
                    ], convexity=10);
                    //translate([10, 2, 0]) cube([5, 5, thick - 6  ], center=true);
                }
                translate([25,-10,-thick/2]) cylinder(h=thick, r=11);
                for (p=[1,-1]) {
                    translate([ 25,-10,p*10 ]) rotate([ 0,p*8,0 ]) rotate([0, -90, 0]) cylinder(h=50, r=11);
                }
            }
            //sphere(r=1);
        }
        d=3;
        //translate([10,d,0  ]) for(p=[-1,1]) translate([p*(d+(hinge_thick/2)),0,0]) cylinder(h=thick*2, r=d, center=true, $fn=25);
    }
}

!trigger();

module volume(grips=0){
    lower=5;
    upper=12;
    difference(){
        minkowski(){
            translate([0,0,-lower-THICKNESS*1.5]) linear_extrude(lower+upper+THICKNESS, convexity = 20) shape();
            sphere(r=1.4, center=true, $fn=30);
        }
        translate([0,0,-THICKNESS/2]) base_pcb_clearance(upper=upper, lower=lower, wall_thickness=1.4);
        translate([0,0,-THICKNESS/2]) base_pcb_margin();
    }
}


//! Printing notes and finishing instructions for the upper clamshell.
module fsckpad_enclosure_upper_stl()
stl("fsckpad enclosure"){
    //Upper clamshell.
}

//! Printing notes and finishing instructions for the lower clamshell.
module fsckpad_enclosure_lower_stl()
stl("fsckpad enclosure"){
    //Lower clamshell.
    intersection(){
        volume();
        translate([-200, -200, -400]) cube([400, 400, 400]);
    }
}

!fsckpad_enclosure_lower_stl();

//! Assembly instructions for the completed enclosure.
module fsckpad_enclosure_assembly()
assembly("fsckpad enclosure assembly"){
    fsckpad_enclosure_upper_stl();
    fsckpad_enclosure_lower_stl();
}

if($preview)
    //%fsckpad_board_assembly();
    fsckpad_enclosure_assembly();