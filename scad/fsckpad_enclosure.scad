$pp1_colour = "grey";           // Override any global defaults here if required, see NopSCADlib/global_defs.scad.
include <NopSCADlib/lib.scad>   // Includes all the vitamins and utilities in NopSCADlib but not the printed parts.
include <fsckpad_board.scad> //Include the autogenerated board for design purposes

ADAFRUIT_TFT_1p9 = let(size = [57.2, 36.6], hole=2.5, screen=[46,25]) [
    "Adafruit 1.9 320x170 Color IPS TFT Display - ST7789", "Adafruit_1p9",
    size.x, size.y, 1.6,
    3,
    3,
    3.5,
    grey(75),
    false,
    [ 
        [-hole, -hole],
        [hole, hole],
        [-hole, hole],
        [hole, -hole]
    ],
    [
        [ size.x/2, size.y/2, 0, "chip", screen.x, screen.y, 5.2, "black" ]
    ],
    []
];

ADAFRUIT_TFT_1p54 = let(size = [43.7, 41.8], hole=2.5, screen=[32, 31]) [
    "Adafruit 1.54 240x240 Wide Angle TFT LCD Display with MicroSD - ST7789 with EYESPI Connector", "Adafruit_1p54",
    size.x, size.y, 1.6,
    3,
    3,
    3.5,
    grey(75),
    false,
    [ 
        [-hole, -hole],
        [hole, hole],
        [-hole, hole],
        [hole, -hole]
    ],
    [
        [ size.x/2, size.y/2, 0, "chip", screen.x, screen.y, 5.2, "black" ]
    ],
    []
];

ADAFRUIT_TFT_2p0 = let(size = [59.2, 35.5], hole=2.5, screen=[inch(2), 31]) [
    "2.0 320x240 Color IPS TFT Display with microSD Card Breakout - ST7789 EYESPI", "Adafruit_2p0",
    size.x, size.y, 1.6,
    3,
    3,
    3.5,
    grey(75),
    false,
    [ 
        [-hole, -hole],
        [hole, hole],
        [-hole, hole],
        [hole, -hole]
    ],
    [
        [ size.x/2, size.y/2, 0, "chip", screen.x, screen.y, 5.2, "black" ]
    ],
    []
];

ADAFRUIT_TFT_2p2 = let(size = [66.35, 40.63], hole=2.5, screen=[55.23, 40]) [
    "2.2 18-bit color TFT LCD display with microSD card breakout - EYESPI Connector", "Adafruit_2p8",
    size.x, size.y, 1.6,
    3,
    3,
    3.5,
    grey(75),
    false,
    [ 
        [-hole, -hole],
        [hole, hole],
        [-hole, hole],
        [hole, -hole]
    ],
    [
        [ size.x/2, size.y/2, 0, "chip", screen.x, screen.y, 5.2, "black" ]
    ],
    []
];

ADAFRUIT_TFT_2p8_TOUCH = let(size = [81.3, 62.5], hole=2.5, screen=[69.6, 45.2]) [
    "2.8 TFT LCD with Cap Touch Breakout Board w/MicroSD Socket - EYESPI Connector", "Adafruit_2p8",
    size.x, size.y, 1.6,
    3,
    3,
    3.5,
    grey(75),
    false,
    [ 
        [-hole, -hole],
        [hole, hole],
        [-hole, hole],
        [hole, -hole]
    ],
    [
        [ size.x/2, size.y/2, 0, "chip", screen.x, screen.y, 5.2, "black" ]
    ],
    []
];

SCREEN = ADAFRUIT_TFT_1p9;



module shape(){
    //mirrors the board perimiter to symmetrize the shape
    union(){
        polygon(BOARD_POLY);
        translate([-WIDTH,0,0]) mirror([1,0,0]) polygon(BOARD_POLY);
    }
}

//!shape();

module correct_position_feather(headers=1){
    position_Feather() translate([-10,20,3.5 + headers*8.5]) rotate([0,0,90]) children();
}



module board_and_feather_assembly(headers=1)
assembly("Board and Daughterboard"){
    base_pcb();
    correct_position_feather(headers){
        pcb(Feather405);
        if (headers){
            translate([0,-10.2,-11]) pin_socket(2p54header, 16, 1);
            translate([5,10.2,-11]) pin_socket(2p54header, 12, 1);
        }
    }
}

//!board_and_feather_assembly();

module feather_clearance(){
    intersection(){
        hull(){
            linear_extrude(1.6) offset(0.3) shape();
            correct_position_feather(1) pcb(Feather405);
        }

        linear_extrude(40, center=true, convexity=10) shape();
    }
}

//!feather_clearance();

module stick_clearance(dia=25, z_offset=6, angle=27){
    union(){
        cylinder(d=dia, h=z_offset*2);
        translate([0,0,z_offset]) cylinder(h=z_offset*2, r1=5, r2=(dia)*sin(angle));
    }
}

module button_shape(h=3, r=2.5, oblong=10, margin=1){
   translate([0,0,margin]) rounded_rectangle([r*2, r*2+oblong, h-margin], r=r-0.01, xy_center=true);
   rad = r + margin;
   rounded_rectangle([rad*2, rad*2+oblong, margin], r=rad-0.01, xy_center=true);
} 

//!button_shape();

module button(proud=2, z=0, r=5, oblong=10, dish=0, clear=3){
    union() {
        translate([0,0,z-.4]) {
            if (dish > 0){
                intersection(){
                    button_shape(h=proud+0.4+dish*2+1.4, r=r, oblong=oblong, margin=1);
                    translate([0,0,-96]) sphere(100, $fn=60);
                }
                
            } else if ( dish < 0) {
                //indent
                
            } else {
                //flat
                button_shape(h=proud+1.4+0.4, r=r, oblong=oblong, margin=1);
            }
        }
        translate([0,0,clear+0.01]) difference(){
            cylinder(h=z-clear-0.4, r=r+1);
            translate([0,0,-0.001]) cylinder(h=0.4, r=r);
        }
    }
}

//!button();

module position_screen(){
    translate([0,18,0]) position_EYESPI1() children();
}

lower=40;
upper=10.4;

module grip(d=35, n=17){
    scale([1.2, 3, 1.5]) sphere(d=d, $fn=n);
}

//!grip();

module positive_volume(grips=1){
    minkowski(){
            union(){
                translate([0,0,0]) linear_extrude(upper+THICKNESS, convexity = 20) shape();
                feather_clearance();
                if (grips) {
                    for (i = [-1, 1]){
                        translate([i*75,30,-20]) position_Centroid1() rotate([20,0,i*15]) grip();
                    }
                }
            }
            sphere(r=1.4, $fn=4);
        }
}

//!positive_volume();

module negative_volume(){
    //void above PCB
    translate([0,0,-0.02]) base_pcb_clearance(upper=upper, lower=0);
    //void below PCB
    translate([0,0,0]) intersection() {
        base_pcb_clearance(upper=upper, lower=lower);
        feather_clearance();
    }
    //main board
    translate([0,0,-THICKNESS/2-.2]) linear_extrude(THICKNESS+.2, convexity = 20) shape();
    //apertures for thumbsticks
    position_LS1() stick_clearance();
    position_RS1() stick_clearance();
    //USB cable cutout
    correct_position_feather() pcb_component_position(Feather405, "usb_C") rotate([0,0,180]) usb_C(cutout=true);
    //Space for Feather board
        correct_position_feather() cube([
            pcb_size(Feather405)[0]+.8,
            pcb_size(Feather405)[1]+.8,
            pcb_size(Feather405)[2]+.8,
        ], center=true);
    //heatset inserts
    position_pcb_mounts() insert_hole(F1BM2p5, upper-5-1.4);
    
    //buttons
    position_Y1() button(z=upper+1.4, oblong=0, r=5.2);
    position_X1() button(z=upper+1.4, oblong=0, r=5.2);
    position_A1() button(z=upper+1.4, oblong=0, r=5.2);
    position_B1() button(z=upper+1.4, oblong=0, r=5.2);
    position_Start1() button(z=upper+1.4, oblong=4, r=2.7);
    position_Select1() button(z=upper+1.4, oblong=4, r=2.5);
    position_POW1() rotate([0,0,0]) button(z=upper+1.4, oblong=4, r=2.5);
    translate([0,0,upper+THICKNESS-5]) position_screen() pcb(SCREEN);
    
}

//!insert_hole(F1BM2p5, 10);
//!negative_volume();

module volume(grips=1){
    difference(){
        positive_volume(grips);
        //negative_volume();
    }
}

//!sphere(r=10, $fn=4);
!volume();

//! Printing notes and finishing instructions for the upper clamshell.
module fsckpad_enclosure_upper_stl()
stl("fsckpad enclosure"){
    //Upper clamshell.
    intersection(){
        volume();
        translate([-200, -200, -THICKNESS/2]) cube([400, 400, 400]);
    }
}

//! Printing notes and finishing instructions for the lower clamshell.
module fsckpad_enclosure_lower_stl()
stl("fsckpad enclosure"){
    //Lower clamshell.
    intersection(){
        volume();
        translate([-200, -200, -400-THICKNESS/2]) cube([400, 400, 400]);
    }
}

!fsckpad_enclosure_upper_stl();
//!fsckpad_enclosure_lower_stl();

//! Assembly instructions for the completed enclosure.
module fsckpad_enclosure_assembly()
assembly("fsckpad enclosure assembly"){
    fsckpad_enclosure_upper_stl();
    //fsckpad_enclosure_lower_stl();
}

if($preview)
    //%fsckpad_board_assembly();
    fsckpad_enclosure_assembly();
    //correct_position_feather() pcb(Feather405);