$pp1_colour = "grey";           // Override any global defaults here if required, see NopSCADlib/global_defs.scad.
include <NopSCADlib/lib.scad>   // Includes all the vitamins and utilities in NopSCADlib but not the printed parts.
include <fsckpad_board.scad> //Include the autogenerated board for design purposes

module shape(){
    union(){
        polygon(BOARD_POLY);
        translate([-WIDTH,0,0]) mirror([1,0,0]) polygon(BOARD_POLY);
    }
}

module correct_position_feather(headers=1){
    position_Feather() translate([-10,20,3.5 + headers*8.5]) rotate([0,0,90]) children();
}

module board_and_feather_assembly(headers=1)
assembly("Board and Daughterboard"){
    base_pcb();
    correct_position_feather(headers){
        pcb(Feather405);
        if (headers){
            translate([0,-10.2,-11]) pin_socket(2p54header, 16, 1);
            translate([5,10.2,-11]) pin_socket(2p54header, 12, 1);
        }
    }
}

module feather_clearance(){
    intersection(){
        hull(){
            linear_extrude(1.6) offset(0.3) shape();
            correct_position_feather(1) pcb(Feather405);
        }

        linear_extrude(40, center=true, convexity=10) shape();
    }
}

//!feather_clearance();

module stick_clearance(dia=25, z_offset=6, angle=30){
    union(){
        cylinder(d=dia, h=z_offset*2);
        translate([0,0,z_offset]) cylinder(h=z_offset*2, r1=5, r2=(dia)*sin(angle));
    }
}

module volume(grips=0){
    lower=40;
    upper=10.4;
    difference(){
        minkowski(){
            union(){
                translate([0,0,0]) linear_extrude(upper+THICKNESS, convexity = 20) shape();
                feather_clearance();
            }
            sphere(r=1.4, $fn=30);
        }
        //upper void
        translate([0,0,-0.02]) base_pcb_clearance(upper=upper, lower=0);
        //lower void
        translate([0,0,0]) intersection() {
            base_pcb_clearance(upper=upper, lower=lower);
            feather_clearance();
        }
        //board rim
        translate([0,0,-THICKNESS/2-.2]) linear_extrude(THICKNESS+.2, convexity = 20) shape();
        position_LS1() stick_clearance();
        position_RS1() stick_clearance();
        correct_position_feather() pcb_component_position(Feather405, "usb_C") rotate([0,0,180]) usb_C(cutout=true);
        correct_position_feather() cube([
            pcb_size(Feather405)[0]+.8,
            pcb_size(Feather405)[1]+.8,
            pcb_size(Feather405)[2]+.8,
        ], center=true);
        //heatset inserts
        position_pcb_mounts() insert_hole(F1BM2p5, upper-5-1.4);
    }
}

//!volume();

//! Printing notes and finishing instructions for the upper clamshell.
module fsckpad_enclosure_upper_stl()
stl("fsckpad enclosure"){
    //Upper clamshell.
    intersection(){
        volume();
        translate([-200, -200, THICKNESS/2]) cube([400, 400, 400]);
    }
}

//! Printing notes and finishing instructions for the lower clamshell.
module fsckpad_enclosure_lower_stl()
stl("fsckpad enclosure"){
    //Lower clamshell.
    intersection(){
        volume();
        translate([-200, -200, -400+THICKNESS/2]) cube([400, 400, 400]);
    }
}

!fsckpad_enclosure_upper_stl();
//!fsckpad_enclosure_lower_stl();

//! Assembly instructions for the completed enclosure.
module fsckpad_enclosure_assembly()
assembly("fsckpad enclosure assembly"){
    fsckpad_enclosure_upper_stl();
    //fsckpad_enclosure_lower_stl();
}

if($preview)
    //%fsckpad_board_assembly();
    fsckpad_enclosure_assembly();
    //correct_position_feather() pcb(Feather405);